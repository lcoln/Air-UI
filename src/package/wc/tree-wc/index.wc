<template>
  <div class="air-ui-tree-container">
    <div class="air-ui-tree"></div>
  </div>
</template>

<script>
import '../icon-wc/index.js';
import './index.less';
import router from '../../tools/router/index.esm.js'

const skins = {
  1: 'air-green',
  2: 'air-blue',
  3: 'air-pine',
  4: 'air-darkGreen',
  5: 'air-yellow',
  6: 'air-purple'
}

const routeMode = {
  'hash': 'hash',
  'browser': 'pathname'
}

function setClass (type, ele, h) {
  findEl(type, ele, function (dom) {
    if (dom.className.indexOf('tree-li-childs') > -1) {
      if (type === 'child') {
        dom.className = 'tree-li tree-li-childs tree-li-hide'
        dom.style.height = 0
        findEl('parent', ele, function (dom) {
          if (dom.className === 'tree-li tree-li-childs tree-li-show') {
            dom.style.height = dom.offsetHeight - h + 'px'
          }
        })
      } else if (type === 'parent') {
        dom.className = 'tree-li tree-li-childs tree-li-show'
        dom.style.height = dom.style.height ? dom.offsetHeight + h + 'px' : h + 'px'
      }
    }
  })
}

function findEl (type, dom, cb) {
  while (type === 'parent' && dom.parentElement) {
    cb && cb(dom)
    dom = dom.parentElement
  }
  while (type === 'child' && dom.lastElementChild) {
    cb && cb(dom)
    dom = dom.lastElementChild
  }
}

function tagReg (tag) {
  return ["div", "a", "p", "span", "section", "Link"].includes(tag)
}

function pickMenuItem(ctx, pathname, mode) {
  let btns = [...new Set(ctx.__DOM__.querySelectorAll('.tree-childs-btn'))]
  let btns1 = [...new Set(ctx.__DOM__.querySelectorAll('.tree-btn'))]
  console.log({pathname})
  for (let it of [...btns, ...btns1]) {
    console.log({it})
    if (pathname === it[routeMode[mode]]) {
      it.style.background = '#38343c'
    } else {
      it.style.background = ''
    }
  }
}

function createHref (pathname, mode) {
  return pathname === 'javascript:;' 
    ? pathname
    : (mode === 'hash' ? `#${pathname}` : pathname)
}

export default class Tree {
  props = {
    data: [],
    color: '#b7b7b7'
  }
  data = {

  }

  /* render */
  async mounted () {
    let _this = this
    let { __WCCONFIG__ = {}, __BASECONFIG__ = {} } = this;
    // console.log({ __WCCONFIG__ });
    const { mode = 'browser' } = __WCCONFIG__;
    pickMenuItem(_this, location[routeMode[mode]], mode)
    router.on('*', (ev) => {
      pickMenuItem(
        _this, 
        ev.target.location[routeMode[mode]],
        mode
      )
    })

    this.__DOM__.setAttribute('style', `color: ${this.props.color};`)
    this.__DOM__.addEventListener('click', function (ev) {

      let { target } = ev
      let { nodeName, innerHTML, className, parentElement, pathname } = target
      let { nextElementSibling } = parentElement
      if ((nodeName === 'LI' && className === 'tree-li-head')
        || (parentElement && parentElement.className.indexOf('tree-li-head') > -1)){
        
        if (nextElementSibling) {
          _this.dispatchEvent(new CustomEvent('tree_wc_select', {
            detail: ev
          }))
          let { className, childElementCount } = nextElementSibling
          if (className.indexOf('tree-li-show') > -1) {
            setClass('child', nextElementSibling, childElementCount * 30 + 15)
          } else {
            setClass('parent', nextElementSibling, childElementCount * 30 + 15)
          }
        }
      } else if (className.indexOf('tree-childs-btn') > -1) {
        pickMenuItem(_this, pathname, mode)
      } 
      if (nodeName === "A") {
        if (__BASECONFIG__?.framework === 'react') {
          if (__WCCONFIG__?.mode === 'browser') {
            ev.preventDefault();
            if (target.href !== 'javascript:;' && target.pathname)
              __WCCONFIG__?.history?.push(target.pathname)
          } else {}
        }
      }
    }, false)
    this.__DOM__.children[0].innerHTML = this._render(this.props.data)
  }
  unmount () {
    console.log('unmount')
  }
  watch (name, old, v) {
    switch (name) {
      case 'skin':
        this.__DOM__.setAttribute('class', `air-ui-tree ${skins[v] || skins[1]}`)
        break;
      case 'data':
        this.props.data = JSON.parse(v)
        break;
      case 'color':
        this.props.color = v
        break;
      default:
        // statements_def
        break;
    }
  }
  adopted () {
    console.log('adopted')
  }
  _render (v, content = [], count = 1, chref = '') {
    let { __WCCONFIG__ = {}, __BASECONFIG__ = {} } = this;
    for (let [i, it] of v.entries()) {
      let tag = tagReg(it.tag) ? it.tag : 'a'
      
      let href = it.path 
        ? `${chref === 'javascript:;' ? '' : chref}/${it.path}` 
        : 'javascript:;'
      const finalHref = createHref(href, __WCCONFIG__?.mode);

      if (it.childs && it.childs.length) {
        content.push(`<ul class="tree-ul"> <li class="tree-li tree-li-head"> <${tag} class="tree-btn" href="${finalHref}">${it.title}</${tag}> </li><li class="tree-li tree-li-childs tree-li-hide">`)
        this._render(it.childs, content, count, href)
        count++
      } else if (i === v.length - 1) {
        content.push(`<${tag} class="tree-btn tree-childs-btn" href="${finalHref}">${it.title}</${tag}>` + '</li></ul>'.repeat(count))
        count = 1
      } else {
        content.push(`<${tag} class="tree-btn tree-childs-btn" href="${finalHref}">${it.title}</${tag}>`)
      }
    }
    return content.join('')
  }
  _calculate(dom, tag){

  }
}
</script>
